name: Auto Deploy (main â†’ server)

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          submodules: false
      - name: Validate required secrets
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY:  ${{ secrets.SSH_PRIVATE_KEY }}
          APP_DIR:  ${{ secrets.DEPLOY_APP_DIR }}
        run: |
          for v in SSH_HOST SSH_USER SSH_KEY APP_DIR; do
            if [ -z "${!v}" ]; then
              echo "Missing required secret: $v"
              exit 1
            fi
          done
      - name: Setup SSH
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY:  ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          printf "%s" "$SSH_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          touch ~/.ssh/known_hosts
          ssh-keyscan -T 5 -H "$SSH_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true
      - name: Preflight SSH check
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          ssh -i ~/.ssh/id_ed25519 -o BatchMode=yes -o StrictHostKeyChecking=yes "$SSH_USER@$SSH_HOST" 'echo ok'
      - name: Deploy via SSH
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          APP_DIR:  ${{ secrets.DEPLOY_APP_DIR }}
        run: |
          ssh -i ~/.ssh/id_ed25519 -o BatchMode=yes -o StrictHostKeyChecking=yes $SSH_USER@$SSH_HOST <<'EOSSH'
          set -euo pipefail
          command -v git >/dev/null 2>&1 || { echo "git is not installed on server"; exit 1; }
          mkdir -p "$APP_DIR"
          git config --global --add safe.directory "$APP_DIR" || true
          cd "$APP_DIR" || exit 1

          REPO_URL="https://github.com/alzaem2002-ctrl/nursery-management-system-dari-alhanonah-system.git"
          if [ ! -d .git ]; then
            if [ "$(ls -A 2>/dev/null | wc -l)" -gt 0 ]; then
              git init
              git remote add origin "$REPO_URL" || git remote set-url origin "$REPO_URL"
            else
              git clone "$REPO_URL" .
            fi
          else
            git remote get-url origin >/dev/null 2>&1 || git remote add origin "$REPO_URL"
          fi

          git fetch --prune origin
          git checkout -B main
          git reset --hard origin/main
          if [ -f .gitmodules ]; then
            git submodule sync --recursive || true
            git submodule update --init --recursive || true
          else
            # remove stale submodule config if any
            git config -l | awk -F= '/^submodule\..*\.url=/{print $1}' | while read -r key; do git config --unset "$key" || true; done
          fi

          if [ -f package-lock.json ]; then npm ci; else npm i; fi
          npm run build || true

          pm2 start ecosystem.config.cjs || pm2 restart ecosystem.config.cjs || pm2 restart all
          pm2 save
          EOSSH
